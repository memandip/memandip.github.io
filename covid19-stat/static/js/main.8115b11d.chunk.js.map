{"version":3,"sources":["partials/RCard.js","components/dashboard/CovidPieChart.js","components/dashboard/index.js","apiUrls.js","components/map/index.js","partials/RNavbar.js","App.js","serviceWorker.js","index.js"],"names":["RCard","title","value","bodyClass","color","Card","Title","style","Body","className","CovidPieChart","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","RADIAN","Math","PI","radius","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","COLORS","this","props","data","confirmed","recovered","deaths","name","width","height","dataKey","map","entry","index","key","Component","Dashboard","state","fetch","then","res","json","setState","Container","Row","Col","Map","L","setView","panTo","latLng","geoJson","geojson","clickable","addTo","id","RNavbar","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","to","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8115b11d.chunk.js","sourcesContent":["import React from 'react'\nimport { Card } from 'react-bootstrap'\n\nconst RCard = ({ title, value, bodyClass, color }) => (\n    <Card>\n        <Card.Title>\n            <h4 style={{ color }}>{title}</h4>\n        </Card.Title>\n        <Card.Body className={bodyClass}>\n            <h4 style={{ color }}>{value}</h4>\n        </Card.Body>\n    </Card>\n)\n\nexport default RCard","import React, { Component } from 'react'\nimport { PieChart, Pie, Cell } from 'recharts'\n\nexport default class CovidPieChart extends Component {\n\n    renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }) => {\n        const RADIAN = Math.PI / 180,\n            radius = innerRadius + (outerRadius - innerRadius) * 0.5,\n            x = cx + radius * Math.cos(-midAngle * RADIAN),\n            y = cy + radius * Math.sin(-midAngle * RADIAN)\n\n        return (\n            <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n                {`${(percent * 100).toFixed(0)}%`}\n            </text>\n        )\n    }\n\n    render() {\n        const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042']\n        let { confirmed, recovered, deaths } = this.props.data\n        let data = [\n            { name: 'Active Cases', value: (confirmed.value - (recovered.value + deaths.value)) },\n            { name: 'Recovered', value: recovered.value },\n            { name: 'Deaths', value: deaths.value }\n        ]\n        return (\n            <PieChart width={500} height={500}>\n                <Pie\n                    data={data}\n                    cx={200}\n                    cy={200}\n                    outerRadius={150}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                >\n                    {\n                        data.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index+1]} />)\n                    }\n                </Pie>\n            </PieChart>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport RCard from '../../partials/RCard'\nimport CovidPieChart from './CovidPieChart'\nimport { mainApi } from '../../apiUrls'\n\nexport default class Dashboard extends Component {\n\n    state = {\n        data: null\n    }\n\n    async componentDidMount() {\n        await fetch(mainApi)\n            .then(res => res.json())\n            .then(data => this.setState({ data }))\n    }\n\n    render() {\n        let { data } = this.state,\n            COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042']\n        return (\n            <Container>\n                {data && (\n                    <Row>\n                        <Col>\n                            <RCard title='Total Cases'\n                                value={data.confirmed.value}\n                                color={COLORS[0]} />\n                        </Col>\n                        <Col>\n                            <RCard title='Active Cases'\n                                value={data.confirmed.value - (data.deaths.value + data.recovered.value)}\n                                color={COLORS[1]} />\n                        </Col>\n                        <Col>\n                            <RCard title='Recovered'\n                                value={data.recovered.value}\n                                color={COLORS[2]} />\n                        </Col>\n                        <Col>\n                            <RCard title='Deaths'\n                                value={data.deaths.value}\n                                color={COLORS[3]} />\n                        </Col>\n                    </Row>\n                )}\n                {this.state.data && <CovidPieChart data={this.state.data} />}\n            </Container>\n        )\n    }\n}\n","export const mainApi = 'https://covid19.mathdro.id/api'\n\nexport const confirmedDetail = 'https://covid19.mathdro.id/api/confirmed'\n\nexport const recoveredDetail = 'https://covid19.mathdro.id/api/recovered'\n\nexport const deathsDetail = 'https://covid19.mathdro.id/api/deaths'\n\nexport const dailySummary = 'https://covid19.mathdro.id/api/daily'\n\nexport const dailyTimeSummary = 'https://covid19.mathdro.id/api/daily/DATE_STRING' // format = (2-14-2020)\n\nexport const image = 'https://covid19.mathdro.id/api/og'\n\nexport const countries = 'https://covid19.mathdro.id/api/countries'\n\nexport const countryDetail = 'https://covid19.mathdro.id/api/countries/COUNTRY' // iso3 = NPL\n\n\n\n","import React, { Component } from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport L from 'leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport geojson from './geo.json'\n\nexport default class Map extends Component {\n\n    componentDidMount() {\n        let map = L.map('map').setView([39.74739, -105], 4),\n            style = {\n                stroke: true,\n                fill: true,\n                fillOpacity: 1\n            }\n\n        map.panTo(new L.latLng(27.6711212, 85.3446311))\n        L.geoJson(geojson, { clickable: true }).addTo(map)\n\n        // markers = L.markerClusterGroup()\n\n        // markers.addLayer(L.marker(27.6711212, 85.3446311))\n        // L.marker([27.6711212, 85.3446311]).addTo(map)\n        // map.addLayer(markers)\n        // L.marker([27.6711212, 85.3446311], { title: \"My marker\" }).addTo(map)\n\n        // L.marker([51.5, -0.09]).addTo(map);\n\n        // L.circle([51.508, -0.11], {\n        //     color: 'red',\n        //     fillColor: '#f03',\n        //     fillOpacity: 0.5,\n        //     radius: 500\n        // }).addTo(map)\n\n        // L.polygon([\n        //     [51.509, -0.08],\n        //     [51.503, -0.06],\n        //     [51.51, -0.047]\n        // ]).addTo(map)\n\n        // let tiles = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        //     maxZoom: 18,\n        //     attribution: '&copy; <a target=\"_blank\" href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Points &copy 2012 LINZ'\n        // }),\n        //     latlng = L.latLng(27.6711212, 85.3446311),\n        //     map = L.map('map', { center: latlng, zoom: 2, layers: [tiles] })\n\n        // L.marker([27.6711212, 85.3446311], {title: 'My Marker'}).addTo(map)\n\n        // map.on('click', function(e){\n        //     console.log('e', e)\n        // })\n    }\n\n    render() {\n        return (\n            <div id=\"map\"></div>\n        )\n    }\n}","import React from 'react'\nimport { Nav, Navbar } from 'react-bootstrap'\nimport { NavLink } from 'react-router-dom'\n\nconst RNavbar = () => (\n    <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand>Covid 19</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n                <NavLink className='nav-link' to=\"/\">Dashboard</NavLink>\n                <NavLink className='nav-link' to=\"/map\">Map</NavLink>\n            </Nav>\n        </Navbar.Collapse>\n    </Navbar>\n)\n\nexport default RNavbar","import React from 'react'\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute\n} from \"react-router-dom\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nimport Dashboard from './components/dashboard'\nimport Map from './components/map'\nimport RNavbar from './partials/RNavbar'\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<RNavbar />\n\t\t\t<Switch>\n\t\t\t\t<Route path=\"/\" exact={true} component={Dashboard} />\n\t\t\t\t<Route path=\"/map\" exact={true} component={Map} />\n\t\t\t</Switch>\n\t\t</Router>\n\t)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}